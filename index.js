// Generated by CoffeeScript 1.10.0
(function() {
  var Validate;

  Validate = (function() {
    function Validate(value1, result) {
      this.value = value1;
      this.result = result != null ? result : true;
    }

    Validate.prototype.isNull = function(type) {
      if (!this.result) {
        return this;
      }
      if (this.value !== null) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.isUndefined = function(type) {
      if (!this.result) {
        return this;
      }
      if (this.value !== void 0) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.isString = function(type) {
      if (!this.result) {
        return this;
      }
      if (typeof this.value !== 'string') {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.notEmpty = function() {
      if (!this.result) {
        return this;
      }
      if (!this.value) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.isEmail = function() {
      if (!this.result) {
        return this;
      }
      if (!/^.+@.+\..+$/.test(this.value)) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.hasOnlyDigits = function() {
      if (!this.result) {
        return this;
      }
      if (!/^\d+$/.test(this.value)) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.inRange = function(left, right) {
      if (!this.result) {
        return this;
      }
      this.lessThen(right);
      this.moreThen(left);
      return this;
    };

    Validate.prototype.matchRegExp = Validate.match;

    Validate.prototype.match = function(re) {
      if (!this.result) {
        return this;
      }
      if (!re.test(this.value)) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.hasPrefix = Validate.startWith;

    Validate.prototype.startWith = function(prefix) {
      if (!this.result) {
        return this;
      }
      if (this.value.slice(0, prefix.length) !== prefix) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.hasPostfix = Validate.endWith;

    Validate.prototype.endWith = function(postfix) {
      if (!this.result) {
        return this;
      }
      if (this.value.slice(-postfix.length) !== postfix) {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.lower = Validate.lessThen;

    Validate.prototype.lessThen = function(length) {
      if (!this.result) {
        return this;
      }
      if (typeof this.value === 'string') {
        if (this.value.length >= length) {
          this.result = false;
        }
      } else if (typeof this.value === 'number') {
        if (this.value >= length) {
          this.result = false;
        }
      }
      return this;
    };

    Validate.prototype.higher = Validate.moreThen;

    Validate.prototype.moreThen = function(length) {
      if (!this.result) {
        return this;
      }
      if (typeof this.value === 'string') {
        if (this.value.length <= length) {
          this.result = false;
        }
      } else if (typeof this.value === 'number') {
        if (this.value <= length) {
          this.result = false;
        }
      }
      return this;
    };

    Validate.prototype.isNumber = function(type) {
      if (!this.result) {
        return this;
      }
      if (typeof this.value !== 'number') {
        this.result = false;
      }
      return this;
    };

    Validate.prototype.end = function() {
      return this.result;
    };

    return Validate;

  })();

  module.exports = function(value) {
    return new Validate(value);
  };

}).call(this);
